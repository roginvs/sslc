name: Build

on:
  push:
    branches: [main, master]
  pull_request:
    types: [opened, synchronize]

jobs:
  build_windows:
    runs-on: windows-2019
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Update toolset
        run: sed -i 's|<PlatformToolset>v100</PlatformToolset>|<PlatformToolset>v141_xp</PlatformToolset>|g' sslc.vcxproj

      - name: Link statically
        run: sed -i 's|MultiThreadedDebugDLL|MultiThreadedDebug|g' sslc.vcxproj

      - name: Build Debug
        run: msbuild sslc.sln "/t:Clean;Build" /p:Configuration="Debug" /p:Platform="Win32" /m

      - name: Test
        shell: bash
        run: |          
          export SSLC=../Debug/sslc.exe
          (cd test && bash ./tests.bash)

      - name: Upload Debug
        uses: actions/upload-artifact@v4
        with:
          name: windows-debug
          path: |
            **/Debug/*.exe

      # - name: Build Debug for Fallout1
      #   run: msbuild sslc.vcxproj "/t:Clean;Build" /p:Configuration="Debug (for Fallout1)" /p:Platform="Win32" /m

      # - name: Upload Debug for Fallout1
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-Debug-for-Fallout1
      #     path: |
      #       **/Debug*/*.exe

      - name: Mkdir
        run: mkdir -p Build

      - name: Build Release
        run: msbuild sslc.sln "/t:Clean;Build" /p:Configuration="Release" /p:Platform="Win32" /m

      - name: Upload Release
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: |
            **/Build/*.exe

      # - name: Build Release for Fallout1
      #   run: msbuild sslc.sln "/t:Clean;Build" /p:Configuration="Release (for Fallout1)" /p:Platform="Win32" /m

      # - name: Upload Release for Fallout1
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-Release-for-Fallout1
      #     path: |
      #       **/Build/*.exe

      - name: Build Release dll
        run: msbuild sslc.sln "/t:Clean;Build" /p:Configuration="Release (dll)" /p:Platform="Win32" /m

      - name: Upload Release dll
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-dll
          path: |
            **/Build/*.dll

      # - name: Build Win2K
      #   run: msbuild sslc.sln "/t:Clean;Build" /p:Configuration="Win2K" /p:Platform="Win32" /m

      # - name: Upload Win2K
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-Win2K
      #     path: |
      #       **/Win2K*/*.exe

  build-wasm:
    name: WebAssembly (WASI) Build
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    if: false # Disable this job because WASI do not support setjmp/longjmp
    env:
      WASI_VERSION: "25"
      WASI_VERSION_FULL: "25.0"
      WASI_SDK_DIR: ${{ github.workspace }}/wasi-sdk
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download wasi-sdk
        run: |
          curl -L https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${{env.WASI_VERSION}}/wasi-sdk-${{env.WASI_VERSION_FULL}}-x86_64-linux.tar.gz | tar xz
          ls -lah
          mv wasi-sdk-${{env.WASI_VERSION_FULL}}-x86_64-linux wasi-sdk

      - name: Configure project
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=${{env.WASI_SDK_DIR}}/share/cmake/wasi-sdk.cmake \
            -DCMAKE_BUILD_TYPE=Release

      - name: Build project
        run: |
          cd build
          cmake --build .
          find .

      - name: Upload WebAssembly artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasm-wasi
          path: |
            build/**/*.wasm

  build_emscripten:
    name: Build webassembly version (Emscripten)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: emscripten/emsdk:4.0.8
    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: Build wasm module
        run: |
          mkdir -p build
          cd build
          emcmake cmake .. -DCMAKE_BUILD_TYPE="Release"
          emmake make

      - name: Upload .wasm artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-emscripten-node-nodefs
          path: build/bin/**

  build_linux:
    name: Linux build
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: Dependencies (x86)
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install -y build-essential g++-multilib libc6-dev:i386

      - name: Configure & build
        run: |
          mkdir out
          cd out
          cmake ..
          make

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: out/bin/**
          retention-days: 7

  release:
    if: github.event_name == 'push'
    runs-on: ubuntu-22.04
    needs: [build_windows, build_linux, build_emscripten]
    permissions: write-all
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare artifacts
        run: |
          ls -laR

          cd artifacts/wasm-emscripten-node-nodefs
          tar -czf ../wasm-emscripten-node-nodefs.tar.gz *
          cd ..
          rm -rf wasm-emscripten-node-nodefs

          ls -laR

          mv windows-debug/Debug/sslc.exe sslc-debug.exe
          rm -rf windows-debug

          mv windows-release/Build/compile.exe compile.exe
          rm -rf windows-release

          mv windows-release-dll/Build/parser.dll parser.dll
          rm -rf windows-release-dll

          mv linux/sslc sslc-linux
          rm -rf linux

          ls -laR

          if find . -mindepth 1 -maxdepth 1 -type d | grep -q .; then
            echo "Directory contains subfolders."
            exit 1
          else
            echo "No subfolders found."
            exit 0
          fi

      - name: Generate timestamp tag
        id: tag
        run: echo "TAG_NAME=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Upload release
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: ${{ steps.tag.outputs.TAG_NAME }}
          name: Build from ${{ steps.tag.outputs.TAG_NAME }}
          files: artifacts/*
          draft: false
          prerelease: true
